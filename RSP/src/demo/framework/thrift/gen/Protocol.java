/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package demo.framework.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Protocol implements org.apache.thrift.TBase<Protocol, Protocol._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Protocol");

  private static final org.apache.thrift.protocol.TField ATTR1_FIELD_DESC = new org.apache.thrift.protocol.TField("attr1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTR2_FIELD_DESC = new org.apache.thrift.protocol.TField("attr2", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProtocolStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProtocolTupleSchemeFactory());
  }

  public String attr1; // required
  public int attr2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTR1((short)1, "attr1"),
    ATTR2((short)2, "attr2");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTR1
          return ATTR1;
        case 2: // ATTR2
          return ATTR2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ATTR2_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTR1, new org.apache.thrift.meta_data.FieldMetaData("attr1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR2, new org.apache.thrift.meta_data.FieldMetaData("attr2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Protocol.class, metaDataMap);
  }

  public Protocol() {
  }

  public Protocol(
    String attr1,
    int attr2)
  {
    this();
    this.attr1 = attr1;
    this.attr2 = attr2;
    setAttr2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Protocol(Protocol other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAttr1()) {
      this.attr1 = other.attr1;
    }
    this.attr2 = other.attr2;
  }

  public Protocol deepCopy() {
    return new Protocol(this);
  }

  @Override
  public void clear() {
    this.attr1 = null;
    setAttr2IsSet(false);
    this.attr2 = 0;
  }

  public String getAttr1() {
    return this.attr1;
  }

  public Protocol setAttr1(String attr1) {
    this.attr1 = attr1;
    return this;
  }

  public void unsetAttr1() {
    this.attr1 = null;
  }

  /** Returns true if field attr1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr1() {
    return this.attr1 != null;
  }

  public void setAttr1IsSet(boolean value) {
    if (!value) {
      this.attr1 = null;
    }
  }

  public int getAttr2() {
    return this.attr2;
  }

  public Protocol setAttr2(int attr2) {
    this.attr2 = attr2;
    setAttr2IsSet(true);
    return this;
  }

  public void unsetAttr2() {
    __isset_bit_vector.clear(__ATTR2_ISSET_ID);
  }

  /** Returns true if field attr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr2() {
    return __isset_bit_vector.get(__ATTR2_ISSET_ID);
  }

  public void setAttr2IsSet(boolean value) {
    __isset_bit_vector.set(__ATTR2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTR1:
      if (value == null) {
        unsetAttr1();
      } else {
        setAttr1((String)value);
      }
      break;

    case ATTR2:
      if (value == null) {
        unsetAttr2();
      } else {
        setAttr2((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTR1:
      return getAttr1();

    case ATTR2:
      return Integer.valueOf(getAttr2());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTR1:
      return isSetAttr1();
    case ATTR2:
      return isSetAttr2();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Protocol)
      return this.equals((Protocol)that);
    return false;
  }

  public boolean equals(Protocol that) {
    if (that == null)
      return false;

    boolean this_present_attr1 = true && this.isSetAttr1();
    boolean that_present_attr1 = true && that.isSetAttr1();
    if (this_present_attr1 || that_present_attr1) {
      if (!(this_present_attr1 && that_present_attr1))
        return false;
      if (!this.attr1.equals(that.attr1))
        return false;
    }

    boolean this_present_attr2 = true;
    boolean that_present_attr2 = true;
    if (this_present_attr2 || that_present_attr2) {
      if (!(this_present_attr2 && that_present_attr2))
        return false;
      if (this.attr2 != that.attr2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Protocol other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Protocol typedOther = (Protocol)other;

    lastComparison = Boolean.valueOf(isSetAttr1()).compareTo(typedOther.isSetAttr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr1, typedOther.attr1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr2()).compareTo(typedOther.isSetAttr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr2, typedOther.attr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Protocol(");
    boolean first = true;

    sb.append("attr1:");
    if (this.attr1 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr2:");
    sb.append(this.attr2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProtocolStandardSchemeFactory implements SchemeFactory {
    public ProtocolStandardScheme getScheme() {
      return new ProtocolStandardScheme();
    }
  }

  private static class ProtocolStandardScheme extends StandardScheme<Protocol> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Protocol struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTR1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr1 = iprot.readString();
              struct.setAttr1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTR2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attr2 = iprot.readI32();
              struct.setAttr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Protocol struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attr1 != null) {
        oprot.writeFieldBegin(ATTR1_FIELD_DESC);
        oprot.writeString(struct.attr1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ATTR2_FIELD_DESC);
      oprot.writeI32(struct.attr2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProtocolTupleSchemeFactory implements SchemeFactory {
    public ProtocolTupleScheme getScheme() {
      return new ProtocolTupleScheme();
    }
  }

  private static class ProtocolTupleScheme extends TupleScheme<Protocol> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Protocol struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAttr1()) {
        optionals.set(0);
      }
      if (struct.isSetAttr2()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAttr1()) {
        oprot.writeString(struct.attr1);
      }
      if (struct.isSetAttr2()) {
        oprot.writeI32(struct.attr2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Protocol struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.attr1 = iprot.readString();
        struct.setAttr1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.attr2 = iprot.readI32();
        struct.setAttr2IsSet(true);
      }
    }
  }

}

