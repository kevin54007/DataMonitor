/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.thss.monitor.base.communication.thrift.autogen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftProcess {

  public interface Iface {

    public void thriftReceiveChange(ByteBuffer param) throws org.apache.thrift.TException;

    public void thriftReloadResource(String resourceType, ByteBuffer param) throws org.apache.thrift.TException;

    public void thriftSetLogLevel(String level) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void thriftReceiveChange(ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.thriftReceiveChange_call> resultHandler) throws org.apache.thrift.TException;

    public void thriftReloadResource(String resourceType, ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.thriftReloadResource_call> resultHandler) throws org.apache.thrift.TException;

    public void thriftSetLogLevel(String level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.thriftSetLogLevel_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void thriftReceiveChange(ByteBuffer param) throws org.apache.thrift.TException
    {
      send_thriftReceiveChange(param);
      recv_thriftReceiveChange();
    }

    public void send_thriftReceiveChange(ByteBuffer param) throws org.apache.thrift.TException
    {
      thriftReceiveChange_args args = new thriftReceiveChange_args();
      args.setParam(param);
      sendBase("thriftReceiveChange", args);
    }

    public void recv_thriftReceiveChange() throws org.apache.thrift.TException
    {
      thriftReceiveChange_result result = new thriftReceiveChange_result();
      receiveBase(result, "thriftReceiveChange");
      return;
    }

    public void thriftReloadResource(String resourceType, ByteBuffer param) throws org.apache.thrift.TException
    {
      send_thriftReloadResource(resourceType, param);
      recv_thriftReloadResource();
    }

    public void send_thriftReloadResource(String resourceType, ByteBuffer param) throws org.apache.thrift.TException
    {
      thriftReloadResource_args args = new thriftReloadResource_args();
      args.setResourceType(resourceType);
      args.setParam(param);
      sendBase("thriftReloadResource", args);
    }

    public void recv_thriftReloadResource() throws org.apache.thrift.TException
    {
      thriftReloadResource_result result = new thriftReloadResource_result();
      receiveBase(result, "thriftReloadResource");
      return;
    }

    public void thriftSetLogLevel(String level) throws org.apache.thrift.TException
    {
      send_thriftSetLogLevel(level);
      recv_thriftSetLogLevel();
    }

    public void send_thriftSetLogLevel(String level) throws org.apache.thrift.TException
    {
      thriftSetLogLevel_args args = new thriftSetLogLevel_args();
      args.setLevel(level);
      sendBase("thriftSetLogLevel", args);
    }

    public void recv_thriftSetLogLevel() throws org.apache.thrift.TException
    {
      thriftSetLogLevel_result result = new thriftSetLogLevel_result();
      receiveBase(result, "thriftSetLogLevel");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void thriftReceiveChange(ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<thriftReceiveChange_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      thriftReceiveChange_call method_call = new thriftReceiveChange_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class thriftReceiveChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer param;
      public thriftReceiveChange_call(ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<thriftReceiveChange_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("thriftReceiveChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        thriftReceiveChange_args args = new thriftReceiveChange_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_thriftReceiveChange();
      }
    }

    public void thriftReloadResource(String resourceType, ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<thriftReloadResource_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      thriftReloadResource_call method_call = new thriftReloadResource_call(resourceType, param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class thriftReloadResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String resourceType;
      private ByteBuffer param;
      public thriftReloadResource_call(String resourceType, ByteBuffer param, org.apache.thrift.async.AsyncMethodCallback<thriftReloadResource_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resourceType = resourceType;
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("thriftReloadResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        thriftReloadResource_args args = new thriftReloadResource_args();
        args.setResourceType(resourceType);
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_thriftReloadResource();
      }
    }

    public void thriftSetLogLevel(String level, org.apache.thrift.async.AsyncMethodCallback<thriftSetLogLevel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      thriftSetLogLevel_call method_call = new thriftSetLogLevel_call(level, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class thriftSetLogLevel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String level;
      public thriftSetLogLevel_call(String level, org.apache.thrift.async.AsyncMethodCallback<thriftSetLogLevel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.level = level;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("thriftSetLogLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        thriftSetLogLevel_args args = new thriftSetLogLevel_args();
        args.setLevel(level);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_thriftSetLogLevel();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("thriftReceiveChange", new thriftReceiveChange());
      processMap.put("thriftReloadResource", new thriftReloadResource());
      processMap.put("thriftSetLogLevel", new thriftSetLogLevel());
      return processMap;
    }

    private static class thriftReceiveChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, thriftReceiveChange_args> {
      public thriftReceiveChange() {
        super("thriftReceiveChange");
      }

      protected thriftReceiveChange_args getEmptyArgsInstance() {
        return new thriftReceiveChange_args();
      }

      protected thriftReceiveChange_result getResult(I iface, thriftReceiveChange_args args) throws org.apache.thrift.TException {
        thriftReceiveChange_result result = new thriftReceiveChange_result();
        iface.thriftReceiveChange(args.param);
        return result;
      }
    }

    private static class thriftReloadResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, thriftReloadResource_args> {
      public thriftReloadResource() {
        super("thriftReloadResource");
      }

      protected thriftReloadResource_args getEmptyArgsInstance() {
        return new thriftReloadResource_args();
      }

      protected thriftReloadResource_result getResult(I iface, thriftReloadResource_args args) throws org.apache.thrift.TException {
        thriftReloadResource_result result = new thriftReloadResource_result();
        iface.thriftReloadResource(args.resourceType, args.param);
        return result;
      }
    }

    private static class thriftSetLogLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, thriftSetLogLevel_args> {
      public thriftSetLogLevel() {
        super("thriftSetLogLevel");
      }

      protected thriftSetLogLevel_args getEmptyArgsInstance() {
        return new thriftSetLogLevel_args();
      }

      protected thriftSetLogLevel_result getResult(I iface, thriftSetLogLevel_args args) throws org.apache.thrift.TException {
        thriftSetLogLevel_result result = new thriftSetLogLevel_result();
        iface.thriftSetLogLevel(args.level);
        return result;
      }
    }

  }

  public static class thriftReceiveChange_args implements org.apache.thrift.TBase<thriftReceiveChange_args, thriftReceiveChange_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftReceiveChange_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftReceiveChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftReceiveChange_argsTupleSchemeFactory());
    }

    public ByteBuffer param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftReceiveChange_args.class, metaDataMap);
    }

    public thriftReceiveChange_args() {
    }

    public thriftReceiveChange_args(
      ByteBuffer param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftReceiveChange_args(thriftReceiveChange_args other) {
      if (other.isSetParam()) {
        this.param = org.apache.thrift.TBaseHelper.copyBinary(other.param);
;
      }
    }

    public thriftReceiveChange_args deepCopy() {
      return new thriftReceiveChange_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public byte[] getParam() {
      setParam(org.apache.thrift.TBaseHelper.rightSize(param));
      return param == null ? null : param.array();
    }

    public ByteBuffer bufferForParam() {
      return param;
    }

    public thriftReceiveChange_args setParam(byte[] param) {
      setParam(param == null ? (ByteBuffer)null : ByteBuffer.wrap(param));
      return this;
    }

    public thriftReceiveChange_args setParam(ByteBuffer param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftReceiveChange_args)
        return this.equals((thriftReceiveChange_args)that);
      return false;
    }

    public boolean equals(thriftReceiveChange_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftReceiveChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftReceiveChange_args typedOther = (thriftReceiveChange_args)other;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftReceiveChange_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.param, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftReceiveChange_argsStandardSchemeFactory implements SchemeFactory {
      public thriftReceiveChange_argsStandardScheme getScheme() {
        return new thriftReceiveChange_argsStandardScheme();
      }
    }

    private static class thriftReceiveChange_argsStandardScheme extends StandardScheme<thriftReceiveChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftReceiveChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param = iprot.readBinary();
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftReceiveChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeBinary(struct.param);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftReceiveChange_argsTupleSchemeFactory implements SchemeFactory {
      public thriftReceiveChange_argsTupleScheme getScheme() {
        return new thriftReceiveChange_argsTupleScheme();
      }
    }

    private static class thriftReceiveChange_argsTupleScheme extends TupleScheme<thriftReceiveChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftReceiveChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          oprot.writeBinary(struct.param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftReceiveChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = iprot.readBinary();
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class thriftReceiveChange_result implements org.apache.thrift.TBase<thriftReceiveChange_result, thriftReceiveChange_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftReceiveChange_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftReceiveChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftReceiveChange_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftReceiveChange_result.class, metaDataMap);
    }

    public thriftReceiveChange_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftReceiveChange_result(thriftReceiveChange_result other) {
    }

    public thriftReceiveChange_result deepCopy() {
      return new thriftReceiveChange_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftReceiveChange_result)
        return this.equals((thriftReceiveChange_result)that);
      return false;
    }

    public boolean equals(thriftReceiveChange_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftReceiveChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftReceiveChange_result typedOther = (thriftReceiveChange_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftReceiveChange_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftReceiveChange_resultStandardSchemeFactory implements SchemeFactory {
      public thriftReceiveChange_resultStandardScheme getScheme() {
        return new thriftReceiveChange_resultStandardScheme();
      }
    }

    private static class thriftReceiveChange_resultStandardScheme extends StandardScheme<thriftReceiveChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftReceiveChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftReceiveChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftReceiveChange_resultTupleSchemeFactory implements SchemeFactory {
      public thriftReceiveChange_resultTupleScheme getScheme() {
        return new thriftReceiveChange_resultTupleScheme();
      }
    }

    private static class thriftReceiveChange_resultTupleScheme extends TupleScheme<thriftReceiveChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftReceiveChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftReceiveChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class thriftReloadResource_args implements org.apache.thrift.TBase<thriftReloadResource_args, thriftReloadResource_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftReloadResource_args");

    private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftReloadResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftReloadResource_argsTupleSchemeFactory());
    }

    public String resourceType; // required
    public ByteBuffer param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCE_TYPE((short)1, "resourceType"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCE_TYPE
            return RESOURCE_TYPE;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftReloadResource_args.class, metaDataMap);
    }

    public thriftReloadResource_args() {
    }

    public thriftReloadResource_args(
      String resourceType,
      ByteBuffer param)
    {
      this();
      this.resourceType = resourceType;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftReloadResource_args(thriftReloadResource_args other) {
      if (other.isSetResourceType()) {
        this.resourceType = other.resourceType;
      }
      if (other.isSetParam()) {
        this.param = org.apache.thrift.TBaseHelper.copyBinary(other.param);
;
      }
    }

    public thriftReloadResource_args deepCopy() {
      return new thriftReloadResource_args(this);
    }

    @Override
    public void clear() {
      this.resourceType = null;
      this.param = null;
    }

    public String getResourceType() {
      return this.resourceType;
    }

    public thriftReloadResource_args setResourceType(String resourceType) {
      this.resourceType = resourceType;
      return this;
    }

    public void unsetResourceType() {
      this.resourceType = null;
    }

    /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceType() {
      return this.resourceType != null;
    }

    public void setResourceTypeIsSet(boolean value) {
      if (!value) {
        this.resourceType = null;
      }
    }

    public byte[] getParam() {
      setParam(org.apache.thrift.TBaseHelper.rightSize(param));
      return param == null ? null : param.array();
    }

    public ByteBuffer bufferForParam() {
      return param;
    }

    public thriftReloadResource_args setParam(byte[] param) {
      setParam(param == null ? (ByteBuffer)null : ByteBuffer.wrap(param));
      return this;
    }

    public thriftReloadResource_args setParam(ByteBuffer param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESOURCE_TYPE:
        if (value == null) {
          unsetResourceType();
        } else {
          setResourceType((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCE_TYPE:
        return getResourceType();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESOURCE_TYPE:
        return isSetResourceType();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftReloadResource_args)
        return this.equals((thriftReloadResource_args)that);
      return false;
    }

    public boolean equals(thriftReloadResource_args that) {
      if (that == null)
        return false;

      boolean this_present_resourceType = true && this.isSetResourceType();
      boolean that_present_resourceType = true && that.isSetResourceType();
      if (this_present_resourceType || that_present_resourceType) {
        if (!(this_present_resourceType && that_present_resourceType))
          return false;
        if (!this.resourceType.equals(that.resourceType))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftReloadResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftReloadResource_args typedOther = (thriftReloadResource_args)other;

      lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(typedOther.isSetResourceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, typedOther.resourceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftReloadResource_args(");
      boolean first = true;

      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.param, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftReloadResource_argsStandardSchemeFactory implements SchemeFactory {
      public thriftReloadResource_argsStandardScheme getScheme() {
        return new thriftReloadResource_argsStandardScheme();
      }
    }

    private static class thriftReloadResource_argsStandardScheme extends StandardScheme<thriftReloadResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftReloadResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.resourceType = iprot.readString();
                struct.setResourceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.param = iprot.readBinary();
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftReloadResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resourceType != null) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resourceType);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          oprot.writeBinary(struct.param);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftReloadResource_argsTupleSchemeFactory implements SchemeFactory {
      public thriftReloadResource_argsTupleScheme getScheme() {
        return new thriftReloadResource_argsTupleScheme();
      }
    }

    private static class thriftReloadResource_argsTupleScheme extends TupleScheme<thriftReloadResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftReloadResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResourceType()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResourceType()) {
          oprot.writeString(struct.resourceType);
        }
        if (struct.isSetParam()) {
          oprot.writeBinary(struct.param);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftReloadResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.resourceType = iprot.readString();
          struct.setResourceTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.param = iprot.readBinary();
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class thriftReloadResource_result implements org.apache.thrift.TBase<thriftReloadResource_result, thriftReloadResource_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftReloadResource_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftReloadResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftReloadResource_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftReloadResource_result.class, metaDataMap);
    }

    public thriftReloadResource_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftReloadResource_result(thriftReloadResource_result other) {
    }

    public thriftReloadResource_result deepCopy() {
      return new thriftReloadResource_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftReloadResource_result)
        return this.equals((thriftReloadResource_result)that);
      return false;
    }

    public boolean equals(thriftReloadResource_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftReloadResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftReloadResource_result typedOther = (thriftReloadResource_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftReloadResource_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftReloadResource_resultStandardSchemeFactory implements SchemeFactory {
      public thriftReloadResource_resultStandardScheme getScheme() {
        return new thriftReloadResource_resultStandardScheme();
      }
    }

    private static class thriftReloadResource_resultStandardScheme extends StandardScheme<thriftReloadResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftReloadResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftReloadResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftReloadResource_resultTupleSchemeFactory implements SchemeFactory {
      public thriftReloadResource_resultTupleScheme getScheme() {
        return new thriftReloadResource_resultTupleScheme();
      }
    }

    private static class thriftReloadResource_resultTupleScheme extends TupleScheme<thriftReloadResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftReloadResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftReloadResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class thriftSetLogLevel_args implements org.apache.thrift.TBase<thriftSetLogLevel_args, thriftSetLogLevel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftSetLogLevel_args");

    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftSetLogLevel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftSetLogLevel_argsTupleSchemeFactory());
    }

    public String level; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEVEL((short)1, "level");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEVEL
            return LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftSetLogLevel_args.class, metaDataMap);
    }

    public thriftSetLogLevel_args() {
    }

    public thriftSetLogLevel_args(
      String level)
    {
      this();
      this.level = level;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftSetLogLevel_args(thriftSetLogLevel_args other) {
      if (other.isSetLevel()) {
        this.level = other.level;
      }
    }

    public thriftSetLogLevel_args deepCopy() {
      return new thriftSetLogLevel_args(this);
    }

    @Override
    public void clear() {
      this.level = null;
    }

    public String getLevel() {
      return this.level;
    }

    public thriftSetLogLevel_args setLevel(String level) {
      this.level = level;
      return this;
    }

    public void unsetLevel() {
      this.level = null;
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return this.level != null;
    }

    public void setLevelIsSet(boolean value) {
      if (!value) {
        this.level = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LEVEL:
        return getLevel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LEVEL:
        return isSetLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftSetLogLevel_args)
        return this.equals((thriftSetLogLevel_args)that);
      return false;
    }

    public boolean equals(thriftSetLogLevel_args that) {
      if (that == null)
        return false;

      boolean this_present_level = true && this.isSetLevel();
      boolean that_present_level = true && that.isSetLevel();
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (!this.level.equals(that.level))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftSetLogLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftSetLogLevel_args typedOther = (thriftSetLogLevel_args)other;

      lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftSetLogLevel_args(");
      boolean first = true;

      sb.append("level:");
      if (this.level == null) {
        sb.append("null");
      } else {
        sb.append(this.level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftSetLogLevel_argsStandardSchemeFactory implements SchemeFactory {
      public thriftSetLogLevel_argsStandardScheme getScheme() {
        return new thriftSetLogLevel_argsStandardScheme();
      }
    }

    private static class thriftSetLogLevel_argsStandardScheme extends StandardScheme<thriftSetLogLevel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftSetLogLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.level = iprot.readString();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftSetLogLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.level != null) {
          oprot.writeFieldBegin(LEVEL_FIELD_DESC);
          oprot.writeString(struct.level);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftSetLogLevel_argsTupleSchemeFactory implements SchemeFactory {
      public thriftSetLogLevel_argsTupleScheme getScheme() {
        return new thriftSetLogLevel_argsTupleScheme();
      }
    }

    private static class thriftSetLogLevel_argsTupleScheme extends TupleScheme<thriftSetLogLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftSetLogLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLevel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLevel()) {
          oprot.writeString(struct.level);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftSetLogLevel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.level = iprot.readString();
          struct.setLevelIsSet(true);
        }
      }
    }

  }

  public static class thriftSetLogLevel_result implements org.apache.thrift.TBase<thriftSetLogLevel_result, thriftSetLogLevel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("thriftSetLogLevel_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new thriftSetLogLevel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new thriftSetLogLevel_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(thriftSetLogLevel_result.class, metaDataMap);
    }

    public thriftSetLogLevel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public thriftSetLogLevel_result(thriftSetLogLevel_result other) {
    }

    public thriftSetLogLevel_result deepCopy() {
      return new thriftSetLogLevel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof thriftSetLogLevel_result)
        return this.equals((thriftSetLogLevel_result)that);
      return false;
    }

    public boolean equals(thriftSetLogLevel_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(thriftSetLogLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      thriftSetLogLevel_result typedOther = (thriftSetLogLevel_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("thriftSetLogLevel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class thriftSetLogLevel_resultStandardSchemeFactory implements SchemeFactory {
      public thriftSetLogLevel_resultStandardScheme getScheme() {
        return new thriftSetLogLevel_resultStandardScheme();
      }
    }

    private static class thriftSetLogLevel_resultStandardScheme extends StandardScheme<thriftSetLogLevel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, thriftSetLogLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, thriftSetLogLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class thriftSetLogLevel_resultTupleSchemeFactory implements SchemeFactory {
      public thriftSetLogLevel_resultTupleScheme getScheme() {
        return new thriftSetLogLevel_resultTupleScheme();
      }
    }

    private static class thriftSetLogLevel_resultTupleScheme extends TupleScheme<thriftSetLogLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, thriftSetLogLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, thriftSetLogLevel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
