/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.thss.monitor.rsp.service.receive.util;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RawDataPacket2 implements org.apache.thrift.TBase<RawDataPacket2, RawDataPacket2._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RawDataPacket2");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PACKET_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("packetSource", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PACKET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("packetData", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RawDataPacket2StandardSchemeFactory());
    schemes.put(TupleScheme.class, new RawDataPacket2TupleSchemeFactory());
  }

  public long timestamp; // required
  public String packetSource; // required
  public String ip; // required
  public ByteBuffer packetData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    PACKET_SOURCE((short)2, "packetSource"),
    IP((short)3, "ip"),
    PACKET_DATA((short)4, "packetData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // PACKET_SOURCE
          return PACKET_SOURCE;
        case 3: // IP
          return IP;
        case 4: // PACKET_DATA
          return PACKET_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PACKET_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("packetSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKET_DATA, new org.apache.thrift.meta_data.FieldMetaData("packetData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RawDataPacket2.class, metaDataMap);
  }

  public RawDataPacket2() {
  }

  public RawDataPacket2(
    long timestamp,
    String packetSource,
    String ip,
    ByteBuffer packetData)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.packetSource = packetSource;
    this.ip = ip;
    this.packetData = packetData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RawDataPacket2(RawDataPacket2 other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.timestamp = other.timestamp;
    if (other.isSetPacketSource()) {
      this.packetSource = other.packetSource;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetPacketData()) {
      this.packetData = org.apache.thrift.TBaseHelper.copyBinary(other.packetData);
;
    }
  }

  public RawDataPacket2 deepCopy() {
    return new RawDataPacket2(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.packetSource = null;
    this.ip = null;
    this.packetData = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public RawDataPacket2 setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getPacketSource() {
    return this.packetSource;
  }

  public RawDataPacket2 setPacketSource(String packetSource) {
    this.packetSource = packetSource;
    return this;
  }

  public void unsetPacketSource() {
    this.packetSource = null;
  }

  /** Returns true if field packetSource is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketSource() {
    return this.packetSource != null;
  }

  public void setPacketSourceIsSet(boolean value) {
    if (!value) {
      this.packetSource = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public RawDataPacket2 setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public byte[] getPacketData() {
    setPacketData(org.apache.thrift.TBaseHelper.rightSize(packetData));
    return packetData == null ? null : packetData.array();
  }

  public ByteBuffer bufferForPacketData() {
    return packetData;
  }

  public RawDataPacket2 setPacketData(byte[] packetData) {
    setPacketData(packetData == null ? (ByteBuffer)null : ByteBuffer.wrap(packetData));
    return this;
  }

  public RawDataPacket2 setPacketData(ByteBuffer packetData) {
    this.packetData = packetData;
    return this;
  }

  public void unsetPacketData() {
    this.packetData = null;
  }

  /** Returns true if field packetData is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketData() {
    return this.packetData != null;
  }

  public void setPacketDataIsSet(boolean value) {
    if (!value) {
      this.packetData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case PACKET_SOURCE:
      if (value == null) {
        unsetPacketSource();
      } else {
        setPacketSource((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PACKET_DATA:
      if (value == null) {
        unsetPacketData();
      } else {
        setPacketData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case PACKET_SOURCE:
      return getPacketSource();

    case IP:
      return getIp();

    case PACKET_DATA:
      return getPacketData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case PACKET_SOURCE:
      return isSetPacketSource();
    case IP:
      return isSetIp();
    case PACKET_DATA:
      return isSetPacketData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RawDataPacket2)
      return this.equals((RawDataPacket2)that);
    return false;
  }

  public boolean equals(RawDataPacket2 that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_packetSource = true && this.isSetPacketSource();
    boolean that_present_packetSource = true && that.isSetPacketSource();
    if (this_present_packetSource || that_present_packetSource) {
      if (!(this_present_packetSource && that_present_packetSource))
        return false;
      if (!this.packetSource.equals(that.packetSource))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_packetData = true && this.isSetPacketData();
    boolean that_present_packetData = true && that.isSetPacketData();
    if (this_present_packetData || that_present_packetData) {
      if (!(this_present_packetData && that_present_packetData))
        return false;
      if (!this.packetData.equals(that.packetData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RawDataPacket2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RawDataPacket2 typedOther = (RawDataPacket2)other;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacketSource()).compareTo(typedOther.isSetPacketSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetSource, typedOther.packetSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPacketData()).compareTo(typedOther.isSetPacketData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packetData, typedOther.packetData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RawDataPacket2(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packetSource:");
    if (this.packetSource == null) {
      sb.append("null");
    } else {
      sb.append(this.packetSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packetData:");
    if (this.packetData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.packetData, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (packetSource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'packetSource' was not present! Struct: " + toString());
    }
    if (ip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ip' was not present! Struct: " + toString());
    }
    if (packetData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'packetData' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RawDataPacket2StandardSchemeFactory implements SchemeFactory {
    public RawDataPacket2StandardScheme getScheme() {
      return new RawDataPacket2StandardScheme();
    }
  }

  private static class RawDataPacket2StandardScheme extends StandardScheme<RawDataPacket2> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RawDataPacket2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKET_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packetSource = iprot.readString();
              struct.setPacketSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PACKET_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packetData = iprot.readBinary();
              struct.setPacketDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RawDataPacket2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.packetSource != null) {
        oprot.writeFieldBegin(PACKET_SOURCE_FIELD_DESC);
        oprot.writeString(struct.packetSource);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.packetData != null) {
        oprot.writeFieldBegin(PACKET_DATA_FIELD_DESC);
        oprot.writeBinary(struct.packetData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RawDataPacket2TupleSchemeFactory implements SchemeFactory {
    public RawDataPacket2TupleScheme getScheme() {
      return new RawDataPacket2TupleScheme();
    }
  }

  private static class RawDataPacket2TupleScheme extends TupleScheme<RawDataPacket2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RawDataPacket2 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.timestamp);
      oprot.writeString(struct.packetSource);
      oprot.writeString(struct.ip);
      oprot.writeBinary(struct.packetData);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RawDataPacket2 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      struct.packetSource = iprot.readString();
      struct.setPacketSourceIsSet(true);
      struct.ip = iprot.readString();
      struct.setIpIsSet(true);
      struct.packetData = iprot.readBinary();
      struct.setPacketDataIsSet(true);
    }
  }

}

